{"ast":null,"code":"import _classCallCheck from \"/Users/arjunvijay/Desktop/foodapp/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/arjunvijay/Desktop/foodapp/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/arjunvijay/Desktop/foodapp/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/arjunvijay/Desktop/foodapp/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/arjunvijay/Desktop/foodapp/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/arjunvijay/Desktop/foodapp/src/App.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport axios from 'axios';\n\nvar FetchDemo =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(FetchDemo, _React$Component);\n\n  function FetchDemo(props) {\n    var _this;\n\n    _classCallCheck(this, FetchDemo);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(FetchDemo).call(this, props));\n    _this.state = {\n      posts: [],\n      loading: true,\n      error: null\n    };\n    return _this;\n  }\n\n  _createClass(FetchDemo, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      // Remove the 'www.' to cause a CORS error (and see the error state)\n      axios.get(\"http://www.reddit.com/r/\".concat(this.props.subreddit, \".json\")).then(function (res) {\n        // Transform the raw data by extracting the nested posts\n        var posts = res.data.data.children.map(function (obj) {\n          return obj.data;\n        }); // Update state to trigger a re-render.\n        // Clear any errors, and turn off the loading indiciator.\n\n        _this2.setState({\n          posts: posts,\n          loading: false,\n          error: null\n        });\n      }).catch(function (err) {\n        // Something went wrong. Save the error in state and re-render.\n        _this2.setState({\n          loading: false,\n          error: err\n        });\n      });\n    }\n  }, {\n    key: \"renderLoading\",\n    value: function renderLoading() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      }, \"Loading...\");\n    }\n  }, {\n    key: \"renderError\",\n    value: function renderError() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }, \"Uh oh: \", this.state.error.message);\n    }\n  }, {\n    key: \"renderPosts\",\n    value: function renderPosts() {\n      if (this.state.error) {\n        return this.renderError();\n      }\n\n      return React.createElement(\"ul\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }, this.state.posts.map(function (post) {\n        return React.createElement(\"li\", {\n          key: post.id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 60\n          },\n          __self: this\n        }, post.title);\n      }));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }, \"/r/\".concat(this.props.subreddit)), this.state.loading ? this.renderLoading() : this.renderPosts());\n    }\n  }]);\n\n  return FetchDemo;\n}(React.Component); // Change the subreddit to anything you like\n\n\nReactDOM.render(React.createElement(FetchDemo, {\n  subreddit: \"reactjs\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 80\n  },\n  __self: this\n}), document.getElementById('root'));","map":{"version":3,"sources":["/Users/arjunvijay/Desktop/foodapp/src/App.js"],"names":["React","ReactDOM","axios","FetchDemo","props","state","posts","loading","error","get","subreddit","then","res","data","children","map","obj","setState","catch","err","message","renderError","post","id","title","renderLoading","renderPosts","Component","render","document","getElementById"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;IAEMC,S;;;;;AACJ,qBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,mFAAMA,KAAN;AAEA,UAAKC,KAAL,GAAa;AACXC,MAAAA,KAAK,EAAE,EADI;AAEXC,MAAAA,OAAO,EAAE,IAFE;AAGXC,MAAAA,KAAK,EAAE;AAHI,KAAb;AAHiB;AAQlB;;;;wCAEmB;AAAA;;AAClB;AACAN,MAAAA,KAAK,CAACO,GAAN,mCAAqC,KAAKL,KAAL,CAAWM,SAAhD,YACGC,IADH,CACQ,UAAAC,GAAG,EAAI;AACX;AACA,YAAMN,KAAK,GAAGM,GAAG,CAACC,IAAJ,CAASA,IAAT,CAAcC,QAAd,CAAuBC,GAAvB,CAA2B,UAAAC,GAAG;AAAA,iBAAIA,GAAG,CAACH,IAAR;AAAA,SAA9B,CAAd,CAFW,CAIX;AACA;;AACA,QAAA,MAAI,CAACI,QAAL,CAAc;AACZX,UAAAA,KAAK,EAALA,KADY;AAEZC,UAAAA,OAAO,EAAE,KAFG;AAGZC,UAAAA,KAAK,EAAE;AAHK,SAAd;AAKD,OAZH,EAaGU,KAbH,CAaS,UAAAC,GAAG,EAAI;AACZ;AACA,QAAA,MAAI,CAACF,QAAL,CAAc;AACZV,UAAAA,OAAO,EAAE,KADG;AAEZC,UAAAA,KAAK,EAAEW;AAFK,SAAd;AAID,OAnBH;AAoBD;;;oCAEe;AACd,aAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAP;AACD;;;kCAEa;AACZ,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACU,KAAKd,KAAL,CAAWG,KAAX,CAAiBY,OAD3B,CADF;AAKD;;;kCAEa;AACZ,UAAG,KAAKf,KAAL,CAAWG,KAAd,EAAqB;AACnB,eAAO,KAAKa,WAAL,EAAP;AACD;;AAED,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG,KAAKhB,KAAL,CAAWC,KAAX,CAAiBS,GAAjB,CAAqB,UAAAO,IAAI;AAAA,eACxB;AAAI,UAAA,GAAG,EAAEA,IAAI,CAACC,EAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAmBD,IAAI,CAACE,KAAxB,CADwB;AAAA,OAAzB,CADH,CADF;AAOD;;;6BAEQ;AACP,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAW,KAAKpB,KAAL,CAAWM,SAAtB,EADF,EAEG,KAAKL,KAAL,CAAWE,OAAX,GACC,KAAKkB,aAAL,EADD,GAEG,KAAKC,WAAL,EAJN,CADF;AAQD;;;;EAtEqB1B,KAAK,CAAC2B,S,GAyE9B;;;AACA1B,QAAQ,CAAC2B,MAAT,CACE,oBAAC,SAAD;AAAW,EAAA,SAAS,EAAC,SAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADF,EAEEC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAFF","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport axios from 'axios';\n\nclass FetchDemo extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      posts: [],\n      loading: true,\n      error: null\n    };\n  }\n\n  componentDidMount() {\n    // Remove the 'www.' to cause a CORS error (and see the error state)\n    axios.get(`http://www.reddit.com/r/${this.props.subreddit}.json`)\n      .then(res => {\n        // Transform the raw data by extracting the nested posts\n        const posts = res.data.data.children.map(obj => obj.data);\n\n        // Update state to trigger a re-render.\n        // Clear any errors, and turn off the loading indiciator.\n        this.setState({\n          posts,\n          loading: false,\n          error: null\n        });\n      })\n      .catch(err => {\n        // Something went wrong. Save the error in state and re-render.\n        this.setState({\n          loading: false,\n          error: err\n        });\n      });\n  }\n\n  renderLoading() {\n    return <div>Loading...</div>;\n  }\n\n  renderError() {\n    return (\n      <div>\n        Uh oh: {this.state.error.message}\n      </div>\n    );\n  }\n\n  renderPosts() {\n    if(this.state.error) {\n      return this.renderError();\n    }\n\n    return (\n      <ul>\n        {this.state.posts.map(post =>\n          <li key={post.id}>{post.title}</li>\n        )}\n      </ul>\n    );\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>{`/r/${this.props.subreddit}`}</h1>\n        {this.state.loading ?\n          this.renderLoading()\n          : this.renderPosts()}\n      </div>\n    );\n  }\n}\n\n// Change the subreddit to anything you like\nReactDOM.render(\n  <FetchDemo subreddit=\"reactjs\"/>,\n  document.getElementById('root')\n);\n"]},"metadata":{},"sourceType":"module"}